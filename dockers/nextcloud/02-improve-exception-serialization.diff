diff --git a/lib/private/Log.php b/lib/private/Log.php
index 4ab647b..9f5a871 100644
--- a/lib/private/Log.php
+++ b/lib/private/Log.php
@@ -312,6 +312,11 @@ class Log implements ILogger, IDataLogger {
 		$app = $context['app'] ?? 'no app in context';
 		$level = $context['level'] ?? ILogger::ERROR;
 
+		$minLevel = $this->getLogLevel($context);
+		if ($level < $minLevel) {
+			return;
+		}
+
 		// if an error is raised before the autoloader is properly setup, we can't serialize exceptions
 		try {
 			$serializer = $this->getSerializer();
@@ -325,7 +330,6 @@ class Log implements ILogger, IDataLogger {
 		$data = array_merge($serializer->serializeException($exception), $data);
 		$data = $this->interpolateMessage($data, $context['message'] ?? '--', 'CustomMessage');
 
-		$minLevel = $this->getLogLevel($context);
 
 		array_walk($context, [$this->normalizer, 'format']);
 
diff --git a/lib/private/Log/ExceptionSerializer.php b/lib/private/Log/ExceptionSerializer.php
index aaf6a39..5f806be 100644
--- a/lib/private/Log/ExceptionSerializer.php
+++ b/lib/private/Log/ExceptionSerializer.php
@@ -223,13 +223,13 @@ class ExceptionSerializer {
 	}
 
 	private function encodeTrace($trace) {
-		$filteredTrace = $this->filterTrace($trace);
-		return array_map(function (array $line) {
+		$trace = array_map(function (array $line) {
 			if (isset($line['args'])) {
 				$line['args'] = array_map([$this, 'encodeArg'], $line['args']);
 			}
 			return $line;
-		}, $filteredTrace);
+		}, $trace);
+		return $this->filterTrace($trace);
 	}
 
 	private function encodeArg($arg, $nestingLevel = 5) {
